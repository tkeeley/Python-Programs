"""
http://www.codeskulptor.org/#user38_KncpBthC4iaDqsg.py


Mini-project description - "Stopwatch: The Game"

"""

import simplegui


##### SET OR INITIALIZE GLOBALS     


width = 300
height = width
control_width = 250
interval = 100
BUTTON_SIZE = 150

timer_int = 0
success_stop = 0
total_stop = 0
last_stop = 0


##### HELPER FUNCTIONS          

### FORMAT HELPER FUNCTION

def format(timer_int):
    """helper function format that converts time
    in tenths of seconds into formatted string A:BC.D"""  
    
    A = timer_int // 600
    B = timer_int % 600 // 100
    C = timer_int % 100 // 10 
    D = timer_int % 10
    return str(A) + ":" + str(B) + str(C) + "." + str(D) 


##### EVENT HANDLERS FOR BUTTONS      


#DEFINE BUTTON HANDLERS - Handlers for mouse click
def startButton():
    timer.start()
    
def stopButton():
    # stops timer and increments success and attempt counters
    global timer_int, total_stop, success_stop, last_stop
    timer.stop()
    if last_stop != timer_int:
        total_stop = total_stop + 1
        if timer_int % 10 == 0:
            success_stop = success_stop + 1
    last_stop = timer_int    

def resetButton():
    # stops timer, resets timer and counters to zero
    global timer_int, total_stop, success_stop
    timer.stop()
    timer_int = 0
    total_stop = 0
    success_stop = 0   

def quit_gameButton():
    frame.stop()  


##### EVENT HANDLER FOR TIMER 

#DEFINE TIMER HANDLER

def timer_handler():
    # define event handler for timer with 0.1 sec interval
    global timer_int
    timer_int = timer_int + 1
      

##### DRAW HANDLERS 
  
#DEFINE DRAW HANDLERS 
# Handler to draw on canvas
def draw_stopwatch(canvas):
    canvas.draw_text(format(timer_int), [width/3.5, height/2], width/6, "Red")
    canvas.draw_text(str(success_stop) + "/" + str(total_stop), (230,30), width/10, "Blue")
    

##### INITIALIZE FRAME AND HANDLERS
    

#CREATE FRAME
frame = simplegui.create_frame("Stopwatch", width, height, control_width)

#REGISTER CANVAS BACKGROUND HANDLER 
# by default is black
frame.set_canvas_background("Black")

#REGISTER DRAW HANDLER
frame.set_draw_handler(draw_stopwatch)

#REGISTER BUTTON, LABEL AND INPUT HANDLERS
    
label = frame.add_label("THE STOPWATCH GAME")
frame.add_button("Start", startButton, BUTTON_SIZE)
frame.add_button("Stop", stopButton, BUTTON_SIZE)
frame.add_button("Reset", resetButton, BUTTON_SIZE)
label = frame.add_label("")
label = frame.add_label("")
label = frame.add_label("")
frame.add_button("Quit program", quit_gameButton, BUTTON_SIZE)

# Register timers
timer = simplegui.create_timer(interval, timer_handler)

# Start the frame
frame.start()


###########   TESTING THE FORMAT   #############
"""
This runs the format testing in the side 
    window of CodeSkulptor
"""


def test(expected, timer_int, skip_test=0):
    global test_count, test_skip
    
    test_count += 1
    
    if skip_test:
        test_skip += 1
        return
    
    print "format(%3d) ==>" % timer_int,
    is_equal(expected, format(timer_int))

def is_equal(expected, actual):
    global test_pass, test_fail
    if expected == actual:
        test_pass += 1
        print actual, "(Pass)"
    else:
        test_fail += 1
        print "Fail>>> expected [%s] but got [%s]" % (str(expected), str(actual))

def test_stats():
    print
    print "Totals tests:", test_count,
    print "  Passed:", test_pass,
    print "  Failed:", test_fail,
    print "  Skipped:", test_skip
    print

    if test_count == 0:
        print "No tests were executed"
    elif  test_count == test_skip:
        print "All tests were skipped"
    else:
        print "FAIL" if test_fail else "ALL GOOD"
        

# Output from test
test_count = 0
test_pass = 0
test_fail = 0
test_skip = 0
  

###################################################
# Test code for the format function
# Note that function should always return a string with 
# six characters

test("0:00.0", 0)
test("0:00.1", 1) 
test("0:00.7", 7)
test("0:01.7", 17)
test("0:06.0", 60)
test("0:06.3", 63)
test("0:21.4", 214)
test("0:59.9", 599)
test("1:00.0", 600)
test("1:00.2", 602)
test("1:06.7", 667)
test("2:12.5", 1325)
test("7:36.7", 4567)
test("9:59.9", 5999)
test("10:00.0", 6000)

###################################################


test_stats()
